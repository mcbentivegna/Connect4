class Token{
	constructor(index, owner){
		this.id = `token-${index}-${owner.id}`,
		this.owner = owner,
		this.dropped = false
		this.columnLocation = 0;
		this.tokenLength = 76;

	}

	drawHTMLToken(){

		//create div element, save to variable
		let htmlToken = document.createElement("div");

		//add to #game-board-underlay
		document.querySelector('#game-board-underlay').appendChild(htmlToken);

		//setAttribute()
		htmlToken.setAttribute('id',this.id)
		htmlToken.setAttribute('class', 'token')
		htmlToken.style.backgroundColor = this.owner.color;

		return htmlToken

	}

	/**
	 * Gets HTML token generated by drawHTMLToken()
	 * @return {div} token div with unique ID
	*/

	get htmlToken(){
		return document.getElementById(this.id)
	}

	/** 
	 * Gets left offset of html element.
	 * @return  {number}   Left offset of token object's htmlToken from #game-board-underlay
	 */
	get offsetLeft(){
		return this.htmlToken.offsetLeft;
	}

	/**
	 * Move html Token left
	 */

	moveLeft(){
		if(this.columnLocation>0){
			this.columnLocation--;
			this.htmlToken.style.left = this.offsetLeft - this.tokenLength
		}
	}


	/**
	 * Move html Token right
	 * @param {int} number of columns on board
	 */

	moveRight(columns){
		if(this.columnLocation<columns-1){
			this.columnLocation++;
			this.htmlToken.style.left = this.offsetLeft + this.tokenLength
		}	
	}

	/**
     * drop token in the column it is hoovering above.
     * We will also update token.dropped to true, and space.token to true.
     * note that the for loop runs through the drop column in reverse order.
     * @param {object} game board. We will pull the drop column from the array of spaces associated with the board.
	 */
	drop(board){

		let dropColumn = board.spaces[this.columnLocation]
	
		for (let i = dropColumn.length; i>0; i--){
			
			let space = dropColumn[i-1]
			if(space.token === null){
				space.mark(this);
				this.dropped = true;

				//animate the process of changing the token's location.
				//this was recommended, something was wonky with the callback, so I decieded to loose the animaion.
				//instead, I just change the css without animation
				/*
				$(this.htmlToken).animate({
					top: this.tokenLength*space.y
				}, 750, 'easeOutBounce', reset)

				*/
				$(this.htmlToken).css({
					top: this.tokenLength*space.y
				})

				
				break;
				
			}
		}
	}
	

}